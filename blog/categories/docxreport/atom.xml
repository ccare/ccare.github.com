<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: DocXReport | Charles' Blog]]></title>
  <link href="http://ccare.github.com/blog/categories/docxreport/atom.xml" rel="self"/>
  <link href="http://ccare.github.com/"/>
  <updated>2013-10-23T21:55:07+01:00</updated>
  <id>http://ccare.github.com/</id>
  <author>
    <name><![CDATA[Charles Care]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PDF Templating with DocXReport]]></title>
    <link href="http://ccare.github.com/blog/2013/09/12/pdf-templating-with-docxreport/"/>
    <updated>2013-09-12T21:07:00+01:00</updated>
    <id>http://ccare.github.com/blog/2013/09/12/pdf-templating-with-docxreport</id>
    <content type="html"><![CDATA[<p class="headline-box">This post was originally written for the <a href="http://www.blackpepper.co.uk/blog/">Black Pepper Software</a>
blog. The <a href="http://www.blackpepper.co.uk/posts/pdf-templating-with-docxreport/">original</a>

was posted on 12/09/2013.</p>


<p>It is very common requirement for software systems to generate a PDF document of some kind. For instance, at
<a href="http://www.blackpepper.co.uk">Black Pepper</a>, we&rsquo;ve built a number of e-commerce systems, and usually our clients have a requirement to produce a nicely formatted invoice or contract which their customers can access through the web.</p>

<p>We often work on a Java stack, and there are therefore a number of approaches to generating a PDF, including Apache FOP (based on XSL), iText, and a variety of others [1]. In a number of solutions we&rsquo;ve gone down the iText approach since it&rsquo;s pure Java and therefore reasonably straight forward to integrate and test. However, it presents a DOM-based approach which is not without it shortcomings. A better solution is to use a template so that layout can be separated from the PDF generation. That&rsquo;s precisely what we wanted to do for a recent project, when we discovered the XDocReport library [2] which provided exactly what we needed. This post describes how to get started with that library.</p>

<!-- more -->


<h2>The problem</h2>

<p>In previous projects, we often used the iText library to produce a PDF, writing quite low-level code to describe the Document Object Model (DOM) of the PDF. Something like the following snippiet:</p>

<p>```java
&hellip;
Document document = new Document();
PdfWriter.getInstance(document, new FileOutputStream(FILE));
document.open();
document.addTitle(&ldquo;My first PDF&rdquo;);
Paragraph para1 = new Paragraph();
para1.add(new Paragraph(&ldquo;Paragraph text&hellip;&rdquo;,</p>

<pre><code>new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD)))
</code></pre>

<p>&hellip;
```</p>

<p>However, following this approach results in a fairly tight-coupling between how a PDF is produced and how it looked. Every time our clients wanted to change the formatting of their report, we had to change our code. In terms of the Model-View-Controller pattern, it felt that we didn&rsquo;t have the correct separation between our controller and view logic. What we needed was a way of templating a PDF document and then substituting our data into placeholders.</p>

<p>Of course, templating is not new to us. We commonly leverage view templates when we generate emails, reports, and other HTML-based documents. One of our favourite template technologies is Apache Velocity &mdash; an open-source template engine that has become the de-facto standard templating engine in many enterprise Java projects. Ideally, we wanted to be able to use Velocity to produce our PDF.</p>

<h2>The solution &ndash; XDocReport</h2>

<p>The XDocReport library [2] is a fantastic utility that provided exactly what we needed. It builds on top of Apache Velocity and IText, but instead of directly producing PDFs, it separates the problem into two parts: a &lsquo;mail-merge&rsquo; of a template document, followed by a reliable converter that produces a PDF from the merged document. Templates can be based on either the popular Microsoft .docx format, or alternatively, the OpenOffice .odt format.</p>

<p>What&rsquo;s really great about XDocReport is the way it plays nicely with the formats it&rsquo;s templating for. Both the Microsoft and OpenOffice format have built-in support for adding data-driven fields which are commonly used when performing a traditional mail merge. To it&rsquo;s credit, XDocReport utilises these features to capture the template placeholders. As a result, it requires very little (if any) software engineering skills to update and maintain a template.</p>

<h2>Using XDocReport</h2>

<p>In order to get going we had to add the library&rsquo;s dependencies to our project. Initially it was a bit tricky to track down the exact dependencies because a number of the dependent libraries have been repackaged (presumably to help when deploying into an OSGI context). If you&rsquo;re using Maven (or Ivy, Gradle etc), then you can grab the jars from the Maven Central repository using the following definitions:</p>

<p>```xml
&hellip;</p>

<p><dependency></p>

<pre><code>&lt;groupId&gt;fr.opensagres.xdocreport&lt;/groupId&gt;
&lt;artifactId&gt;fr.opensagres.xdocreport.document.odt&lt;/artifactId&gt;
&lt;version&gt;1.0.0&lt;/version&gt;
</code></pre>

<p></dependency></p>

<p><dependency></p>

<pre><code>&lt;groupId&gt;fr.opensagres.xdocreport&lt;/groupId&gt;
&lt;artifactId&gt;fr.opensagres.xdocreport.converter.odt.odfdom&lt;/artifactId&gt;
&lt;version&gt;1.0.0&lt;/version&gt;
</code></pre>

<p></dependency></p>

<p><dependency></p>

<pre><code>&lt;groupId&gt;fr.opensagres.xdocreport&lt;/groupId&gt;
&lt;artifactId&gt;fr.opensagres.xdocreport.template.velocity&lt;/artifactId&gt;
&lt;version&gt;1.0.0&lt;/version&gt;
</code></pre>

<p></dependency></p>

<p>&hellip;
```</p>

<p>Next we needed to create a template and add it to our classpath. We decided to use <strong>odt</strong> as our template format. Marking up the document is done using the &lsquo;add field&rsquo; menu in OpenOffice or LibreOffice writer [3]. Inside the template fields you can add artbitrary Velocity expressions. We made use of #if&hellip;#end directives because we were generating a contract that only needed to include a VAT number if a customer was VAT registered.</p>

<p><img src="/images/docxreport/img1.png">
<img src="/images/docxreport/img2.png">
<img src="/images/docxreport/img3.png"></p>

<p>Next we needed some code to populate values into our template. First we created a simple object to represent our model</p>

<pre><code>public class Invoice {

    private String formattedTotal;
    private String vatNumber;
    private boolean vatRegistered;

    ...

}
</code></pre>

<p>Then, finally, we needed some glue code to generate a PDF (here with no exception handling or IO cleanup)</p>

<p>```java</p>

<pre><code>// 1) Load ODT file by filling Velocity template engine and cache
final InputStream in = 
Demo.class.getResourceAsStream("/invoiceTemplate.odt");
final IXDocReport report = XDocReportRegistry.getRegistry()
        .loadReport(in, TemplateEngineKind.Velocity);

// 2) Create context Java model and add model
final IContext context = report.createContext();
context.put("invoice", invoice);

// 3) Generate report by merging Java model with the ODT,
//      and then converting to PDF
final OutputStream out = 
    new FileOutputStream(new File("mergedInvoice.pdf"));
final Options options = Options.getTo(ConverterTypeTo.PDF)
    .via(ConverterTypeVia.ODFDOM);
report.convert(context, options, out);
</code></pre>

<p>```</p>

<h2>Integrating within Spring MVC</h2>

<p>In practice we want to generate and serve the PDF over HTTP. We were using Spring MVC to manage both our server-side pages and RESTful APIs so it made sense to enapsulate our PDF generaton into a custom view. Creating a PDF document on the fly then was a simple matter of writing a small amount of controller logic, passing in a model object and a reference to the template we wanted to use.</p>

<h2>Conclusion</h2>

<p>Using XDocReport has enabled us to produce nicely formatted PDF documents based on data inside our application. The advantage over alternative approaches we&rsquo;ve followed in the past is that anyone with basic word processor skills can update the templates without requiring a software engineer to write code. Using a template-based approach also allowed us to deliver the functionality much faster, and when our customer required a different template to be used in certain situations, dynamically switching the template was a really simple code change.</p>

<h2>References</h2>

<p>[1] List of PDF libraries for Java: [<a href="http://java-source.net/open-source/pdf-libraries/itext">http://java-source.net/open-source/pdf-libraries/itext</a>]</p>

<p>[2] The XDocReport library: [<a href="http://code.google.com/p/xdocreport">http://code.google.com/p/xdocreport</a>]</p>
]]></content>
  </entry>
  
</feed>
