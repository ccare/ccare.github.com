<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Charles' Blog]]></title>
  <link href="http://blog.ccare.me/atom.xml" rel="self"/>
  <link href="http://blog.ccare.me/"/>
  <updated>2013-03-20T10:03:17+00:00</updated>
  <id>http://blog.ccare.me/</id>
  <author>
    <name><![CDATA[Charles Care]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Joining Black Pepper Software]]></title>
    <link href="http://blog.ccare.me/blog/2012/05/16/joining-black-pepper-software/"/>
    <updated>2012-05-16T09:31:00+01:00</updated>
    <id>http://blog.ccare.me/blog/2012/05/16/joining-black-pepper-software</id>
    <content type="html"><![CDATA[<p>Today I start with a new company, on a fresh challenge. I&#8217;ve joined <a href="http://www.blackpepper.co.uk">Black Pepper Software Ltd</a> as a consultant.</p>

<p>Black Pepper are an Agile software house/consultancy based in Leamington Spa.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Octopress!]]></title>
    <link href="http://blog.ccare.me/blog/2012/04/07/hello-octopress/"/>
    <updated>2012-04-07T18:25:00+01:00</updated>
    <id>http://blog.ccare.me/blog/2012/04/07/hello-octopress</id>
    <content type="html"><![CDATA[<p>Hi there!</p>

<p>This my first post using <a href="http://octopress.org">Octopress</a>. Today I setup
<a href="http://blog.ccare.me">this blog</a> which is currently hosted on
<a href="http://pages.github.com/">github pages</a>.
Since I tend to write most of my fragmented thoughts when offline, I&#8217;m
hoping that having the content in a git repo (that&#8217;s editable offline) will be a
great help. I also like the fact that I&#8217;ll be able to be more in control of my
content (when compared to the hosted accounts I&#8217;ve used before).</p>

<p>So, fingers-crossed, and here we go! I plan to migrate older posts from other
sources to here during the next few weeks)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Grails to throw-up a simple interface over JPA entities]]></title>
    <link href="http://blog.ccare.me/blog/2012/03/29/building-a-demo-jpa-integration-for-kasabi/"/>
    <updated>2012-03-29T18:25:00+01:00</updated>
    <id>http://blog.ccare.me/blog/2012/03/29/building-a-demo-jpa-integration-for-kasabi</id>
    <content type="html"><![CDATA[<p>Over the last few weeks, I&#8217;ve been wanting to write a demo for
<a href="http://kasabi.com">Kasabi</a> to show how to integrate data from a database using
object-relational mapping. The idea was that data in an existing database would
be polled and loaded in an ETL fashion. However, in order to build a compelling
demo, I wanted to generate a simple CRUD over my existing domain classes.</p>

<h2>The scenario</h2>

<p>My entity classes followed a DB schema based on the classic suppliers-parts
database used by C. J. Date in his database textbooks.</p>

<p>The suppliers-parts database contains information about a business&#8217;
<strong>Customers</strong> and <strong>Suppliers</strong>, each of these parties will have an <strong>Address</strong>,
which in the relational model is decomposed into a separate database table. In
addition, our database will have a catalogue of <strong>Parts</strong> and a mapping
indicating which <strong>Supplier</strong> supplies which <strong>Part</strong>. Furthermore,
<strong>Customers</strong> will be able to place an <strong>Order</strong>, where an <strong>Order</strong> is an order
of a certain quantity of <strong>Parts</strong>, sourced from a given <strong>Supplier</strong>.</p>

<h2>The datamodel</h2>

<pre><code>                            +---------+
    +--------------+        | Country |  +-----------+
    |   Address    |  *..1  |---------|  | Customer  |
    |--------------+--------+ name    |  |-----------|
    |              |        +---------+  | title     | 1..*
    | addressline1 |                     | firstname +------+
    | addressline2 |         1..*        | surname   |      |
    | addressline3 +---------------------+           |      |
    |              |                     +-----------+      |
    | city         |                                        |
    | postcode     |                            +-----------+---+
    |              |      +-----------+  *..1   | CustomerOrder |
    +---+----------+      | OrderItem +---------+---------------|
        |                 |-----------|         |               |
        |           1..*  |           |         +---------------+
        |          +------+ quanity   +-------+
        |          |      |           |  1..* |
        |          |      +-----------+       |
        |          |                    +-----+--+
        |       +--+-------+            | Part   |
        |       | Supplier |            |--------|
        |       |----------|            |        |
        |  1..* |          |    *..*    | name   |
        +-------+ name     +------------+ color  |
                |          |            | weight |
                +----------+            +--------+
</code></pre>

<h2>JPA Entities</h2>

<p>It is assumed, for the purposes of this demo, that JPA entity classes already
exist for the domain. The easiest way to create entity classes is using the
JPA annotations. E.g.</p>

<figure class='code'><figcaption><span>Customer.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Entity</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Customer</span> <span class="kd">extends</span> <span class="n">AuditableEntityBase</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">title</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@NotNull</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">firstname</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@NotNull</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">surname</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@ManyToOne</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Address</span> <span class="n">address</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>All of my classes have an inherited Id and Version field. These are
defined in <strong>EntityBase</strong>.</p>

<figure class='code'><figcaption><span>EntityBase.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@MappedSuperclass</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">EntityBase</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Id</span>
</span><span class='line'>    <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="n">GenerationType</span><span class="o">.</span><span class="na">AUTO</span><span class="o">)</span>
</span><span class='line'>    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;id&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Long</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Version</span>
</span><span class='line'>    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;version&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">version</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Furthermore, a number of classes also extend from <strong>AuditableEntityBase</strong> in
order to timestamped audit information. Automatic event handlers control the
capture of timestamp fields that indicate when a record was created or last
modified.</p>

<figure class='code'><figcaption><span>AuditableEntityBase.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@MappedSuperclass</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AuditableEntityBase</span> <span class="kd">extends</span> <span class="n">EntityBase</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Temporal</span><span class="o">(</span><span class="n">javax</span><span class="o">.</span><span class="na">persistence</span><span class="o">.</span><span class="na">TemporalType</span><span class="o">.</span><span class="na">TIMESTAMP</span><span class="o">)</span>
</span><span class='line'>    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;created&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Date</span> <span class="n">dateTimeCreated</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Temporal</span><span class="o">(</span><span class="n">javax</span><span class="o">.</span><span class="na">persistence</span><span class="o">.</span><span class="na">TemporalType</span><span class="o">.</span><span class="na">TIMESTAMP</span><span class="o">)</span>
</span><span class='line'>    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;modified&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Date</span> <span class="n">dateTimeModified</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@PreUpdate</span>
</span><span class='line'>    <span class="nd">@PrePersist</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">updateTimeStamps</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">dateTimeModified</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Date</span><span class="o">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">dateTimeCreated</span><span class="o">==</span><span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">dateTimeCreated</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Date</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The entity classes for the suppliers-parts domain model are in a simple java
project, packaged up using maven2. See - <a href="">link&#8230;</a></p>

<p>Build and install the packages use maven</p>

<pre><code>mvn clean install
</code></pre>

<h2>Creating a simple webapp using grails</h2>

<p>The whole point of this demo is to show how relational data can be extracted
from an existing database. In reality, this existing database would be
continually updated by existing systems. And for the purposes of a demo, it
would be interesting to model this situation. In the following steps, we will
create a simple web-based CRUD application that allows you to create and update
records. We need something that will get us a working system with the bare
minimum of effort, so we&#8217;re using SpringSource Grails to build a simple webapp
infront of our JPA database.</p>

<p>For the database we&#8217;ll used a file-based H2 database, although in reality you
would probably be using a production-strength database.</p>

<h3>Create the application</h3>

<p>First, create a new grails app</p>

<pre><code>grails create-app suppliers-parts-webapp
</code></pre>

<p>Next, we need to bring our JPA classes into the project. The JPA classes are
a maven project, so as long as we&#8217;ve installed them into our local maven repo (
by running  in the suppliers-parts-domain project),
we can pull these in via a dependency:</p>

<p>In the BuildConfig.groovy configuration, uncomment the
mavenLocal() repo. And add the following, new entry to the dependencies section:</p>

<figure class='code'><figcaption><span>grails-app/conf/BuildConfig.groovy</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dependencies {
</span><span class='line'>    compile "com.kasabi.demo.suppliers-parts:domain-model:0-1-3-SNAPSHOT"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Update the database to use a file-based development database (rather than the
default, in-mem db) in grails-app/conf/DataSource.groovy</p>

<figure class='code'><figcaption><span>grails-app/conf/DataSource.groovy</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>development {
</span><span class='line'>  dataSource {
</span><span class='line'>    dbCreate = "update"
</span><span class='line'>    url = "jdbc:h2:file:/tmp/suppliersparts;MVCC=TRUE;AUTO_SERVER=TRUE"
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>  <br/>
Tell grails to use the JPA entity manager, and inform hibernate (Grails uses
Hibernate as its persistence implementation) about each entity class you want
to work with.</p>

<figure class='code'><figcaption><span>grails-app/conf/hibernate/hibernate.cfg.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;!DOCTYPE hibernate-configuration SYSTEM</span>
</span><span class='line'><span class="cp">  &quot;http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd&quot;&gt;</span>
</span><span class='line'><span class="nt">&lt;hibernate-configuration&gt;</span>
</span><span class='line'>    <span class="nt">&lt;session-factory&gt;</span>
</span><span class='line'>        <span class="nt">&lt;mapping</span> <span class="na">package=</span><span class="s">&quot;com.kasabi.demo.suppliersparts.domain&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;mapping</span> <span class="na">class=</span><span class="s">&quot;com.kasabi.demo.suppliersparts.domain.EntityBase&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;mapping</span> <span class="na">class=</span><span class="s">&quot;com.kasabi.demo.suppliersparts.domain.AuditableEntityBase&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;mapping</span> <span class="na">class=</span><span class="s">&quot;com.kasabi.demo.suppliersparts.domain.Part&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;mapping</span> <span class="na">class=</span><span class="s">&quot;com.kasabi.demo.suppliersparts.domain.Address&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;mapping</span> <span class="na">class=</span><span class="s">&quot;com.kasabi.demo.suppliersparts.domain.Country&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;mapping</span> <span class="na">class=</span><span class="s">&quot;com.kasabi.demo.suppliersparts.domain.Customer&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;mapping</span> <span class="na">class=</span><span class="s">&quot;com.kasabi.demo.suppliersparts.domain.CustomerOrder&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;mapping</span> <span class="na">class=</span><span class="s">&quot;com.kasabi.demo.suppliersparts.domain.Supplier&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;mapping</span> <span class="na">class=</span><span class="s">&quot;com.kasabi.demo.suppliersparts.domain.OrderItem&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;mapping</span> <span class="na">class=</span><span class="s">&quot;com.kasabi.demo.suppliersparts.domain.Title&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/session-factory&gt;</span>
</span><span class='line'><span class="nt">&lt;/hibernate-configuration&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Grails will generate scaffolding views and controllers for each entity class.
This is achieved using:</p>

<pre><code>grails generate-all &lt;CLASS_NAME&gt;
</code></pre>

<p>You&#8217;ll now have all ui pages and web controllers for each entity. There seems
to be a bug with handling the audit and id fields (which aren&#8217;t needed in the
web forms) so the following script (regenerateScaffolding.sh) has some manual
&#8216;sed&#8217; commands to remove these extra fields.</p>

<figure class='code'><figcaption><span>generate-all.bash</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;a&quot;</span> | grails generate-all com.kasabi.demo.suppliersparts.domain.Part
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;a&quot;</span> | grails generate-all com.kasabi.demo.suppliersparts.domain.Address
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;a&quot;</span> | grails generate-all com.kasabi.demo.suppliersparts.domain.Country
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;a&quot;</span> | grails generate-all com.kasabi.demo.suppliersparts.domain.Customer
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;a&quot;</span> | grails generate-all com.kasabi.demo.suppliersparts.domain.CustomerOrder
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;a&quot;</span> | grails generate-all com.kasabi.demo.suppliersparts.domain.Supplier
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;a&quot;</span> | grails generate-all com.kasabi.demo.suppliersparts.domain.OrderItem
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;a&quot;</span> | grails generate-all com.kasabi.demo.suppliersparts.domain.Title
</span><span class='line'>
</span><span class='line'><span class="k">for </span>i in <span class="sb">`</span>find . -name _form.gsp<span class="sb">`</span>
</span><span class='line'>  <span class="k">do </span>sed -i -e <span class="s2">&quot;/field: &#39;id&#39;, &#39;error&#39;)}/,+6d&quot;</span> <span class="nv">$i</span>
</span><span class='line'>     sed -i -e <span class="s2">&quot;/field: &#39;dateTimeModified&#39;, &#39;error&#39;)}/,+6d&quot;</span> <span class="nv">$i</span>
</span><span class='line'>     sed -i -e <span class="s2">&quot;/field: &#39;dateTimeCreated&#39;, &#39;error&#39;)}/,+6d&quot;</span> <span class="nv">$i</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, we need to configure Grails to process the audit fields. To do this, we
need to add a Hibernate event listener and register it. For those interested&#8230;
the code is [here].</p>

<h3>Run the application</h3>

<p>From the web-app project, it should be simple to start the app on port 8080
with the command:</p>

<pre><code>grails run-war
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Visible Ops]]></title>
    <link href="http://blog.ccare.me/blog/2012/03/23/visible-ops/"/>
    <updated>2012-03-23T16:41:00+00:00</updated>
    <id>http://blog.ccare.me/blog/2012/03/23/visible-ops</id>
    <content type="html"><![CDATA[<p>Last weekend I finally got around to reading
the <a href="http://www.amazon.co.uk/Visible-Ops-Handbook-Implementing-Practical/dp/0975568612">Visible Ops handbook</a>. I&#8217;d
been meaning to read it for a while - ever since I first heard Gene Kim speak at
a conference last year.</p>

<p>All in all it&#8217;s an interesting read. I didn&#8217;t find the book particularly
controversial. But, then again, it is nearly 7 years since the book was first
published. I think few people would disagree that many of the practices are
now part of the &#8216;received wisdom&#8217; of operations. I also found it useful to get
a reminder of the ITIL jargon. Using the correct terms for this sort of thing
is something I&#8217;m a bit weak on, but as the authors say in the book, having a
common language is vital.</p>

<p>Working for a smaller company, I suppose some of the talk about audits and
change-review boards sounded a bit overkill. Although it made me realise that
the natural turn-off of these things is usually more to do with past
experience of bureaucratic processes, rather than a feeling that audit and
change-reviews are, in-themselves, a bad thing.</p>

<p>The other week I gave a <a href="http://www.slideshare.net/cpcare/warwick-2012">lecture</a>
to <a href="http://www2.warwick.ac.uk/fac/sci/dcs/teaching/material/cs321/">students at Warwick</a>
about what it&#8217;s like to
be a software developer at Kasabi. I had lots of things to talk about:
our product, our team, our culture, etc. However I wanted to share something
about our working practices. The practices we use have certainly evolved over
time, inspired from various methodologies and communities including: Scrum,
Kanban, and dev-ops. However, if I had to choose one thing that I couldn&#8217;t do
without, I think it would be having a code-review process that&#8217;s tightly
coupled to the build/release process.</p>

<p>Nearly a year ago, our team moved to
using <a href="http://code.google.com/p/gerrit/">Gerrit</a> as our principle review
tool. The way it integrates with version control and continuous integration is
fantastic. We were already following a continuous deployment model, but I feel
that following the Gerrit workflow has helped us get closer to doing truly
automated deployments. We&#8217;re also a distributed team, so spending extra-time
on code-reviews can make up for less time spent pair-programming.</p>

<p>So lets return to Visible Ops&#8230; for me, one of the biggest take-aways from
reading the book was the idea that the acceptable number of unauthorised
changes should be zero. Two points follow directly from this: 1) that
code-review / change-review should be a straightforward and fast process (so
that it&#8217;s not routinely circumvented), and 2) that even emergency changes
should go through some kind of review process. In fact, the authors of Visible
Ops make the valid point that emergency changes often benefit from closer
review. For me, the simplicity of using a review-tool (like Gerrit) that&#8217;s
built into the release process facilitates both of these goals. There have
been times when I&#8217;ve needed to push an emergency fix. But because the tooling
is relatively quick and simple to use, more and more I&#8217;m finding that I prefer
to take these changes down the normal review path. Even though we&#8217;re not doing
heavy-weight audits, from an ITIL perspective, it&#8217;s re-assuring to know that
these changes are going through a robust, well-understood, and auditable
process.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JPA and Kasabi]]></title>
    <link href="http://blog.ccare.me/blog/2012/03/20/jpa-and-kasabi/"/>
    <updated>2012-03-20T18:04:00+00:00</updated>
    <id>http://blog.ccare.me/blog/2012/03/20/jpa-and-kasabi</id>
    <content type="html"><![CDATA[<p>Over the last couple of days I&#8217;ve been trying to pull together a demo of
integrating an existing JPA application with Kasabi. It&#8217;s been a fun journey
learning (and relearning) the JPA spec, and also working with some of the
internals of the Hibernate framework. It&#8217;s interesting that when a framework
becomes really ubiquitous - like Hibernate, in this case - it&#8217;s really easy to
find online docs and howtos about how to use it, but it&#8217;s far harder to sift
through all that noise to find docs that help you extend it.</p>

<p>In the end, I did get it working: I re-used the annotation scanning plumbing
that Hibernate provides to get access to the JPA configuration, then I walked
the object graph marshalling entities as RDF (I used NTriples) before submitting
them to a Kasabi dataset.</p>

<p>Of course, to complete the demo, I needed an actual JPA application, so I&#8217;ve had
some fun re-learning Spring Roo and Grails in order to build a quick
database-backed webapp. Normally I dislike scaffolding-based frameworks, but
they&#8217;re certainly useful for creating a quick functional app.</p>

<p>I&#8217;ll submit a link to the code at some point soon.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ways of Thinking]]></title>
    <link href="http://blog.ccare.me/blog/2012/03/12/ways-of-thinking/"/>
    <updated>2012-03-12T17:23:00+00:00</updated>
    <id>http://blog.ccare.me/blog/2012/03/12/ways-of-thinking</id>
    <content type="html"><![CDATA[<p>It&#8217;s nice to see Ways of Thinking, Ways of Seeing (ed. Bissell &amp; Dillon) finally published [1]. I contributed Chapter 5 (see [2]), entitled &#8216;Early Computational Modelling: Physical Models, Electrical Analogies and Analogue Computers&#8217;. The origins of this book came from a session which Chris Bissell organised at SHOT 2007. It&#8217;s taken a while to find it&#8217;s way into print, but I think it&#8217;s an interesting collection of different perspectives on modelling.</p>

<p><img class="right" src="http://blog.ccare.me/images/cc/cover.jpg" title="Cover image" ></p>

<p>Thanks to Chris Bissell and Chris Dillon for making it all happen!</p>

<p>[1] http://www.springer.com/engineering/robotics/book/978-3-642-25208-2</p>

<p>[2] http://www.springerlink.com/content/r071882m26486028/</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stub Http Server]]></title>
    <link href="http://blog.ccare.me/blog/2012/03/07/stub-http-server/"/>
    <updated>2012-03-07T20:25:00+00:00</updated>
    <id>http://blog.ccare.me/blog/2012/03/07/stub-http-server</id>
    <content type="html"><![CDATA[<p>At <a href="http://talisplatform.com">Talis</a> we&#8217;ve been building our RDF platform
following a distributed SOA
architecture. Most of our integrations are through RESTful HTTP APIs, and in our
Java projects we tend to use Apache HttpClient to consume them.</p>

<p>As a result, when writing tests I find myself having to frequently stub-out a
remote service. Sometimes we do the usual thing and create mocks. This is fairly
easy, but does involve quite a lot of plumbing - you need a mock HttpClient, then
a mock GetRequest, then a mock entity, and so on&#8230; it can certainly create
quite a lot of boilerplate.</p>

<p>I think this sort of test works much better with a <em>real</em> HttpClient, making
real HTTP calls. We&#8217;ve been using this pattern quite a lot, and found that the
JettyRule class from the junit-rules project is a great way of embedding an
HTTP server into a unit test. Choosing a random free port for this server helps
make the test more robust and independent.</p>

<p>However, I found myself writing more and more &#8216;mock-like&#8217; assertion code into my
handlers. Implementing the happy path was easy, but if I, for example, wanted to
test fail-and-retry logic, I needed to make a number of requests fail, then one
succeed, and assert no other spurious requests were made. Traditionally this is
the perfect use-case for a mock - but I wanted to make these kind of assertions,
and, at the same time, exercise a real HttpClient.</p>

<p>To help, I wrote <a href="http://github.com/ccare/stub-http">stub-http</a>, a really simple stub HTTP Server that is
embeddable in a unit test and supports the recording and playback of a sequence
of Requests and Responses. I based the code on the interface of EasyMock, and
like EasyMock, the stub can be run in either &#8216;strict&#8217;, &#8216;regular&#8217;, or &#8216;nice&#8217;
mode. When running in strict mode, unexpected requests result in an assertion
failure, whereas in nice mode, they return an HTTP 404 code. Switching between
&#8216;regular&#8217; and &#8216;strict&#8217; reflects whether ordering of requests matters.</p>

<p>Here&#8217;s an example test:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Rule</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">StubHttp</span> <span class="n">stubHttp</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StubHttp</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">clientMakesHEADRequestFollowedByGET</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">File</span> <span class="n">testZipFileLocation</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(...);</span>
</span><span class='line'>        <span class="n">stubHttp</span><span class="o">.</span><span class="na">expect</span><span class="o">(</span><span class="s">&quot;HEAD&quot;</span><span class="o">,</span> <span class="s">&quot;/foo.zip&quot;</span><span class="o">).</span><span class="na">andReturn</span><span class="o">(</span><span class="mi">200</span><span class="o">);</span>
</span><span class='line'>        <span class="n">stubHttp</span><span class="o">.</span><span class="na">expect</span><span class="o">(</span><span class="s">&quot;GET&quot;</span><span class="o">,</span> <span class="s">&quot;/foo.zip&quot;</span><span class="o">).</span><span class="na">andReturn</span><span class="o">(</span><span class="mi">200</span><span class="o">);</span>
</span><span class='line'>        <span class="n">stubHttp</span><span class="o">.</span><span class="na">replay</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// ...test client call here...      </span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">clientDoesntDoGETIfHEADRequestIs404</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">File</span> <span class="n">testZipFileLocation</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(...);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Record a single HEAD (returning followed by 404),</span>
</span><span class='line'>        <span class="c1">//  followed by nothing else</span>
</span><span class='line'>        <span class="n">stubHttp</span><span class="o">.</span><span class="na">expect</span><span class="o">(</span><span class="s">&quot;HEAD&quot;</span><span class="o">,</span> <span class="s">&quot;/foo.zip&quot;</span><span class="o">).</span><span class="na">andReturn</span><span class="o">(</span><span class="mi">404</span><span class="o">);</span>
</span><span class='line'>        <span class="n">stubHttp</span><span class="o">.</span><span class="na">replay</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// ...test client call here...        </span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">clientRetriesOn503</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">File</span> <span class="n">testZipFileLocation</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(...);</span>
</span><span class='line'>        <span class="c1">// The first couple of HEAD requests result in a 503 &quot;Temporarily unavailable&quot;</span>
</span><span class='line'>        <span class="c1">//   response, this is then followed by a 200 &quot;OK&quot; response, and a subsequent GET</span>
</span><span class='line'>        <span class="n">stubHttp</span><span class="o">.</span><span class="na">expect</span><span class="o">(</span><span class="s">&quot;HEAD&quot;</span><span class="o">,</span> <span class="s">&quot;/foo.zip&quot;</span><span class="o">).</span><span class="na">andReturn</span><span class="o">(</span><span class="mi">503</span><span class="o">);</span>
</span><span class='line'>        <span class="n">stubHttp</span><span class="o">.</span><span class="na">expect</span><span class="o">(</span><span class="s">&quot;HEAD&quot;</span><span class="o">,</span> <span class="s">&quot;/foo.zip&quot;</span><span class="o">).</span><span class="na">andReturn</span><span class="o">(</span><span class="mi">503</span><span class="o">);</span>
</span><span class='line'>        <span class="n">stubHttp</span><span class="o">.</span><span class="na">expect</span><span class="o">(</span><span class="s">&quot;HEAD&quot;</span><span class="o">,</span> <span class="s">&quot;/foo.zip&quot;</span><span class="o">).</span><span class="na">andReturn</span><span class="o">(</span><span class="mi">503</span><span class="o">);</span>
</span><span class='line'>        <span class="n">stubHttp</span><span class="o">.</span><span class="na">expect</span><span class="o">(</span><span class="s">&quot;HEAD&quot;</span><span class="o">,</span> <span class="s">&quot;/foo.zip&quot;</span><span class="o">).</span><span class="na">andReturn</span><span class="o">(</span><span class="mi">200</span><span class="o">);</span>
</span><span class='line'>        <span class="n">stubHttp</span><span class="o">.</span><span class="na">expect</span><span class="o">(</span><span class="s">&quot;GET&quot;</span><span class="o">,</span> <span class="s">&quot;/foo.zip&quot;</span><span class="o">).</span><span class="na">andReturn</span><span class="o">(</span><span class="mi">200</span><span class="o">);</span>
</span><span class='line'>        <span class="n">stubHttp</span><span class="o">.</span><span class="na">replay</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// ...test client call here...    </span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PubSub Huddle conference]]></title>
    <link href="http://blog.ccare.me/blog/2011/09/30/pub-sub-huddle/"/>
    <updated>2011-09-30T11:39:00+01:00</updated>
    <id>http://blog.ccare.me/blog/2011/09/30/pub-sub-huddle</id>
    <content type="html"><![CDATA[<p>On 23rd September, a colleague and I attended the PubSub Huddle in London. It was a
one-day conference/hack-afternoon hosted by SkillsMatter.</p>

<p>The day was a good event, there were quite a few people around in the morning and I had some
particularly interesting conversations with people responsible for messaging software in hedge funds
and banks. The basic structure of the day was talks in the morning which was then
followed by a self-organised &#8216;hack-afternoon&#8217;. The morning was excellent and had a large number of
attendees. The afternoon was also good fun, but things did tail off as people started disappearing.</p>

<p>The morning started off with Martin Sústrik discussing his vision for &#8216;the future of messaging&#8217;.
Martin is the founder of zeromq, but he was talking more about his higher-level goals to simplify
messaging by pushing handling of basic messaging patterns into infrastructure. Basically, he was
arguing for messaging APIs to be provided as layer-6 (presentation-layer) protocol. The basic points
were:</p>

<ul>
<li>We need to be able to handle messaging in B2B and B2C scenarios, whereas messaging is today
something that generally stays within the corporate firewall.</li>
<li>Standard messaging patterns need to be simple to code</li>
<li>Coding messaging should be as easy as coding against a standard Socket abstraction (as
demonstrated by his work on zeromq)</li>
<li>A major challenge of providing this kind of infrastructure is that multiple patterns would need
to be supported (he mentioned push-pull, pub-sub, request-response), the difficulty being that
the logical topology changes with each pattern</li>
<li>He mentioned there would be even more challenges with security etc but didn&#8217;t discuss them.</li>
<li>His current plans are to form a proposal for a new protocol - currently named Scalability
Protocol - and as a starting point towards this, there is a mailing list
http://groups.google.com/group/sp-discuss-group which is apparently an interesting read.</li>
<li>In terms of practical stuff, he sees zeromq as being a step-towards this (in that it
demonstrates the simple APIs he&#8217;d like to push for). Other practical steps forward are that
people are thinking about adding zeromq to the linux kernel, and considering how vendors might
tackle messaging-aware hardware.</li>
</ul>


<p>The second talk of the day was from Andy Piper from IBM Research. He was talking about MQTT, an open
standard (with an IBM reference implementation) for doing simple pub-sub messaging. MQTT was
designed to be a low-footprint messaging library for sensors and he showed examples of it running on
Android, and also on an Arduino prototype board. It has some nice features, including low resource
requirements, and support for handling different types of retry-handling. The other nice feature was
support for registering an action to be performed if a client disappears. There is an open source
implementation named Mosquito which looked quite interesting. I think a lot of people were a bit
suspicious of the &#8216;IBM sell&#8217;, but it looked like a good fit for collecting data from many sources.</p>

<p>The next two talks moved into the territory of doing pub-sub between web clients and servers.</p>

<p>We heard from Marek Majkowski (RabbitMq) about the difficulties of building a generic solution to
server-browser messaging. He discussed a project that had attempted to do that, and how it had
become really challenging to solve issues around client presence and identity. I found Marek&#8217;s talk
quite interesting, as he discussed the web-socket standard and showed lots of examples of how the
different implementations behaved differently. It really drove home how much the websocket standard
is in it&#8217;s infancy. He also went on to discuss how to approach building a load-balanced server that
could handle messaging-enabled clients, and talked about other products that help make a
non-messaging application built on a standard MVC platform (he kept mentioning Django) to become
messaging enabled. Some of the example services he mentioned were: AppEngine&#8217;s channels API, PubNub,
and Pusher. The majority of these services are designed to support server push rather than client
pull. And while all of these solutions offer some useful features, he concluded by arguing that they
would never be able to provide a simple solution for two-way messaging. He saw the issues around
identity and presence as being too difficult to solve in the generic. In the end he basically said
that you should build your application around messaging from day 1, and then went on to talk about
using NodeJS and SockJS to provide an asynchronous server-side platform.</p>

<p>The fourth talk was from Julien Genestoux about SuperFeedr which allows websites to turn standard
RSS feeds into pub-sub channels. He demoed the PubSubHubhub website that basically acts as messaging
broker. Sites (publishers) host references to rss feeds and notify the Hub when their feed changes.
Supported clients who have subscribed can then be notified by the hub. In a demo he showed how
people could attach arbitrary filters to their subscriptions so they only get notified about certain
changes. He also talked about how their infrastructure could be used to augment a chain of rss
feeds.</p>

<p>After lunch we had a series of lightning talks about various projects&#8230; the two that stood out for
me were:</p>

<ul>
<li>the use of pub-sub messaging to implement the BBC&#8217;s Radio1 homepage using XMPP.</li>
<li>a discussion of the architecture behind datasift.com - which is a stream-based data marketplace
where you can subscribe (any pay) for streams of tweets and other social events containing a
given criteria. They were using a lot of zeromq and kafka to do their processing (4000 messages
a second, I think he said)</li>
</ul>


<p>All in all, the day was definitely worth attending, and although I didn&#8217;t come away with loads of new
info, I did come away with a feeling that investing in learning in more pub-sub technologies is
a good thing to do.</p>

<p>It was also good to get some validation about how people are using zeromq and comparing it to the work
I&#8217;ve been doing at Talis.
Chatting to Lorenzo Alberton after his talk, it was interesting to hear how they approach failover
and scaling of zeromq. It was nice to hear that we following very similar approaches to using and
tuning it - particularly since they are getting quite impressive throughput.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Primitive types and Java performance]]></title>
    <link href="http://blog.ccare.me/blog/2011/07/11/primitive-types-and-java-performance/"/>
    <updated>2011-07-11T09:05:00+01:00</updated>
    <id>http://blog.ccare.me/blog/2011/07/11/primitive-types-and-java-performance</id>
    <content type="html"><![CDATA[<p>Reading article about primitives vs wrapper objects in Java.
Nice to see some graphs and real evidence rather than just gut-feel.</p>

<p>http://vanillajava.blogspot.com/2011/07/low-gc-in-java-use-primitives-instead.html</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git-scm topic branch creation]]></title>
    <link href="http://blog.ccare.me/blog/2011/06/30/git-scm-topic-branch-creation/"/>
    <updated>2011-06-30T08:42:00+01:00</updated>
    <id>http://blog.ccare.me/blog/2011/06/30/git-scm-topic-branch-creation</id>
    <content type="html"><![CDATA[<p>Way I tend to create a topic branch in git-scm for a specific issue:</p>

<pre><code>git checkout -b  # create a local branch
# Do some stuff. We decide that its worth pursuing, so lets add the branch to the remote repo
git push origin [branch-name] # push the local branch to the remote repo
git branch --set-upstream [branch-name] origin/[branch-name] # make branch track remote
# Carry on working in the branch
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Openstack and Cloudera workshops at Velocity]]></title>
    <link href="http://blog.ccare.me/blog/2011/06/28/openstack-and-cloudera-workshops-at-velocity/"/>
    <updated>2011-06-28T21:47:00+01:00</updated>
    <id>http://blog.ccare.me/blog/2011/06/28/openstack-and-cloudera-workshops-at-velocity</id>
    <content type="html"><![CDATA[<p>The first workshop I attended at Velocity was run by Rib Pedde, Todd Willey, and Matt Ray, and discussed the Openstack project. This was less of a workshop, and more of a talk in three parts. Interesting, none-the-less. Openstack is a virtualisation platform which has gained quite a lot of momentum in the last year.</p>

<p>http://velocityconf.com/velocity2011/public/schedule/detail/19970</p>

<p>The majority of the session provided an overview of the different components of OpenStack as they stand today and a look at the project&#8217;s road map. It seems that a lot has happened to this project over the last couple of months and they seem to have quite an interesting set of features coming in the next couple of months.</p>

<p>As the speakers presented it, there are two core components Openstack: OpenStack Compute (or Nova), and OpenStack Object Store, (or Swift). In Amazon speak, these are the OpenStack equivalents of EC2 and S3. Both the virtualisation and storage layers aim to be scalable, back-end agnostic, and use eventually consistent.</p>

<p>The speakers went through the architecture of a what a compute cluster would look like. Compute nodes run the virtual machines and are typically commodity servers with a public, private, and management network. After the talk, some people were asking whether all three interfaces were necessary. The speakers said that they weren&#8217;t, but they did recommended separating management/private traffic from the public traffic.</p>

<p>One of the interesting features was to see they&#8217;ve got an EC2 compatible which is nice. Another thing that was interesting is that while they store metadata in SqlAlchemy for fast access, the canonical source of the cluster&#8217;s state is derived from the state of the virtualisation layer. Not sure exactly how they&#8217;re deriving firewall and networking configuration - that&#8217;s one for me to read more about.</p>

<p>Another feature I liked was the concept Utility VM - a kind of virtual equivalent of a hardware appliance. A Utility VM essentially allows them to do various virtualisation offerings such as Database as service.</p>

<p>They also discussed their API, which unsurprisingly makes use of async rest calls. Someone asked if they had plans to provide a synchronous api, the response was that clients should get feedback by polling. However, the speakers indicated that there might be support for a pub-sub mechanism with callbacks at some point in the future. I found the fact they were considering callbacks interesting. Although it would add state to their infrastructure, it&#8217;s clearly a feature that clients want.</p>

<p>Interesting upcoming features:</p>

<ul>
<li>Quantum: Networking as a service (with Cisco)</li>
<li>Burrow: HTTP message queue</li>
<li>Red Dwarf: Database as a service</li>
<li>Keystone - pluggable auth for all OpenStack components</li>
<li>lunr - volumes as service</li>
<li>A dashboard to manage the stack</li>
<li>Atlas: load balancing as a service (backed by Zeus)</li>
</ul>


<p>All of these components are clearly being designed with a specific initial vendor in mind (e.g. Zeus for their load-balancing solution) but the general OpenStack philosophy seems to be to make these back-ends pluggable and introduce additional back-ends later on.</p>

<p>They then talked a little around the design of Swift, and how enterprise storage was expensive and requirements were going to double every year. Swift needed to be designed for failure with self healing using commodity hardware. To provide resilience, Swift has the concept of an &#8216;availability zone&#8217; inside a cluster&#8230; it&#8217;s an overloaded term, but an OpenStack avaliablity zone they mean a set of storage resources that might all die together in the event of a network, cooling or power failure. Data is then stored in 3 different zones.</p>

<p>A other few parts of the architecture I found interesting:</p>

<ul>
<li>To manage where the data is stored they have a coordination function named the Ring. Interesting story of how the Ring&#8217;s implementation evolved. They started with a DB and although they knew it wasn&#8217;t going to scale long term it quickly became unmanageble. It was an interesting lesson-learnt that they &#8220;didn&#8217;t realise how amazingly quickly [a relational db] becomes a bottleneck&#8221;. One member of the audience asked if the ring was the bottleneck&#8230; the speakers thought that networking would be the true bottleneck.</li>
<li>To achieve better scalability they distributed the work by pushing work into the replicas. They defer checking and auditing etc to the replicas rather than in a central coordination, and they now store metadata in sqllite databases within Swift.</li>
<li>Objects are versioned using system time, so at Rackspace everything&#8217;s synchronised over NTP. For the distributed databases (sqllite stored in Swift), the NTP timestamps are used for row-based synchronisation</li>
</ul>


<p>Finally, Matt Ray talked a little about using Chef to manage OpenStack. He gave an intro to Chef and the idea of infrastructure as code.</p>

<p>Knife openstack is a project to bring the equivalent management utilities to ec-tools.
The other interesting tool he mentioned was Crowbar from Dell which is a PXE-based tool to bootstrap openstack and chef.
One interesting point he made was that OpenStack was evolving so fast that he was having to create a separate Chef cookbook for each major version. I found that interesting because we&#8217;ve seen a similar issue with needing to manage and version several parallel branches of Puppet config.</p>

<p>The final workshop I attended at Velocity was</p>

<p>&#8220;Managing the System Lifecycle and Configuration of Apache Hadoop and Other Distributed Systems&#8221;
/ Philip Zeyliger Cloudera</p>

<p>The talk introduced Hadoop and it&#8217;s various components, which was handy as there always seem to be so many.</p>

<ul>
<li>HDFS</li>
<li>MapReduce</li>
<li>ZooKeeper</li>
<li>HBase</li>
<li>Oozie</li>
<li>HUE</li>
</ul>


<p>He discussed how different people were managing Hadoop hosts (PXE, kickstart, Cobbler) and software (packaging, file transfer, installer scripts).</p>

<p>An interesting comment made during the talk were that we still talk about distributed systems are clusters of nodes whereas Hadoop is all about programming a datacentre as if it were one node. So, for instance, puppet and chef are designed to manage N hosts running a number of services&#8230; but with hadoop you&#8217;re trying to manage a N hosts running ONE distributed/failsafe service.</p>

<p>He introduced the Cloudera Service and Configuration Manager (SCM) which is essentially a central console with log and status aggregation and the Cloudera Activity Monitor, which he described as being like UNIX top for hadoop.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NodeJS at Velocity]]></title>
    <link href="http://blog.ccare.me/blog/2011/06/26/nodejs-at-velocity/"/>
    <updated>2011-06-26T21:17:00+01:00</updated>
    <id>http://blog.ccare.me/blog/2011/06/26/nodejs-at-velocity</id>
    <content type="html"><![CDATA[<p>NodeJS seemed to be a passing theme in a number of the talks at the conference,
including:</p>

<ul>
<li>&#8220;Performance Enhancing Programming with NodeJS&#8221; by Tim Caswell</li>
<li>Bryan Cantrill&#8217;s &#8220;Instrumenting the real-time web: Node.js, DTrace and the Robinson Projection&#8221;</li>
<li>&#8220;Cast - The Open Deployment Platform&#8221; by Paul Querna</li>
<li>&#8220;Real-Time, Real-Fast&#8221; by Dylan Schiemann</li>
</ul>


<p>I attended Tim Caswell&#8217;s and Bryan Cantrill&#8217;s sessions, both of which were great
introductions to Node.js hipe</p>

<p>Tim Caswell&#8217;s (creationix on twitter/github) workshop was a great demo of
Node&#8217;s scalability. He spun up a webserver on a private wlan and got the whole
room to start pinging various demo apps.</p>

<p>A few things discussed:</p>

<p>Running JavaScript on client and server can avoid the issue of doubling your
effort&#8230; You don&#8217;t cross the boundary all the time if pieces of modular
functionality can be run either client side or server side.
There&#8217;s an opportunity to run more in the server during the period that the
Browser&#8217;s busy downloading content or engaged in pre-render tasks. Once the
app is fully up, you can then progressively do more in the client by shipping
the same scripts over the wire.
Non blocking IO. Using buffers and memcpy to avoid string builder overhead
Some discussion on tooling: node-inspector, DTrace, node -debug, and v8
graphical debug all sound interesting.</p>

<p>Bryan Cantrill&#8217;s talk was, in a single word, energetic. Unsurprisingly we saw a
lot of DTrace and we heard about a Node.js app he&#8217;d build to monitor net traffic
during a hackday. I think that Cantrill&#8217;s talk can be summarised as Node being
the union of the popularity of JavaScript, non-blocking IO, and the Unix APIs
(or, as Cantrill puts it &#8220;the APIs God intended&#8221;).</p>

<p>In summary, there seems to be a lot of hype around Node. And it seems that
it&#8217;s the mix of JavaScript, Closures, and Non-blocking IO that are capturing
the mood. Also because JavaScript never had any IO in the core language, you
don&#8217;t have to drop the bits of the language that don&#8217;t fit the Node.js model
(e.g. if you&#8217;re using twisted you&#8217;re only wanting to use a subset of python).
I&#8217;ll definitely be playing with it to understand more.</p>

<p>Of course, the backbone of Node is the V8 JavaScript engine, and the theme of
JavaScript tuning was definitely strong at Velocity. Another interesting keynote
was Douglas Crockford on JavaScript. He was talking about the JavaScript
benchmarks and how a lack of good benchmarks had resulted in the wrong kind of
optimisations. Recently Crockford created a benchmark by running jslint over
jslint. He argued that this provided a much better benchmark as it touched more
widely-used patterns (such as closures and prototypal inheritance) than the more
common &#8220;how fast does this loop execute&#8221; tests often found in benchmarks. He
also shared some interesting stats on performance gains that the V8 team had
been able to make using his benchmark.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deleting tags in gitscm]]></title>
    <link href="http://blog.ccare.me/blog/2011/06/23/deleting-tags-in-gitscm/"/>
    <updated>2011-06-23T09:52:00+01:00</updated>
    <id>http://blog.ccare.me/blog/2011/06/23/deleting-tags-in-gitscm</id>
    <content type="html"><![CDATA[<p>I&#8217;m bound to forget this little cryptic command to delete branch foo.</p>

<pre><code>git push origin :refs/tags/foo
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Statistics @ Velocity]]></title>
    <link href="http://blog.ccare.me/blog/2011/06/11/statistics-at-velocity/"/>
    <updated>2011-06-11T21:12:00+01:00</updated>
    <id>http://blog.ccare.me/blog/2011/06/11/statistics-at-velocity</id>
    <content type="html"><![CDATA[<p>One of the pre-conference workshops was an excellent session by John Rauser from
Amazon. I&#8217;ve never been hugely confident at my abilities to do estimation,
forecasting, capacity planning etc. It&#8217;s a really difficult thing.</p>

<p>I&#8217;d heard that Rauser was an excellent speaker, so I attended his workshop on
statistics. For anyone interested, Rauser also did a shorter keynote later in
the conference, which you can catch on YouTube. A big theme from these
discussions was understanding the reduction that your statistical reporting
makes. Averages, variances, etc are all summary statistics - but how often to we
really think of them as lossy formats?</p>

<p>  My main takeaways from both of his talk were to try and understand the
  lossiness of summary stats. I particularly liked his summary statistics of
  Moby Dick. Another major theme in his talks was to make time to do deep dives
  into log data, even if it only means you know how to when something really
  goes wrong.</p>

<p>  During the workshop, John discussed how we approach estimating someone&#8217;s age.
  Given that problem, the instinct reaction is to propose a estimated value: 45,
  58, 60 etc. However, to quote Rauser: we &#8216;[shouldn&#8217;t] give a single number
  unless you&#8217;re forced to. We should always give a range, ideally with an agreed
  confidence interval such as 90%. I can guess someone&#8217;s age with 100%
  confidence if I state their age is between 0 and 150, but that&#8217;s not very
  useful. But by combining additional information and reducing absolute
  certainty I can start to narrow that down. This isn&#8217;t rocket science, but how
  many times have we been asked &#8220;when will this be ready&#8221;, or &#8220;when&#8217;s the
  delivery date&#8221;? And in the face of those questions, how often have we given a
  range with a stated confidence. Perhaps we feel that our project managers
  would laugh us out of the room? Project managers like fixed dates.</p>

<p>However, in complex projects - and IT projects are usually complex - a range is
often more honest, and would often better express the reality of the situation.
Again, this is nothing new - if you have an Agile Coach on your team, they will
probably recommend estimating using ranges or 3-point estimates. However, it&#8217;s
easy to slip into the default behaviour of giving a single numeric response.</p>

<p>  Throughout the talk, Rauser covered other examples, such as estimating the
  depth of his desk, and discussed how measurement improves our ability to
  estimate with confidence.</p>

<p>  As the workshop continued, Rauser set us an estimating task. He asked us to
  provide estimates (ranges, of course!) for a number of questions. The key was
  not the specific answers, but rather that we were aiming for 90% confidence
  estimates&#8230; i.e we should have got 18 out of the 20 questions correct. We
  then graphed the results of a portion of the room and found that most people
  averaged between 20% and 40% accuracy. An interesting demo of how humans seem
  to default to be over-optimistic in their estimating.</p>

<p>  In the final section of the workshop, Rauser discussed the nature of
  statistics - how school curriculum are still teaching stats the &#8216;old way&#8217; and
  how for practical analysis, it&#8217;s really much better to tackle stats correctly
  using computer modelling. Do we need to learn about how to apply statistical
  tests and derive summary statistics? After all, summary stats are lossy and
  stop you looking at your data? Are they more dangerous in the hands of the
  layman that just getting a computer to process the raw stats? We saw a demo of
  some of the statistical features of excel, and then, a demo of more powerful
  tools like <strong>R</strong> and <strong>Sage</strong>.</p>

<p>  In conclusion: Rauser left us with a few final comments:</p>

<ul>
<li>everything is uncertain</li>
<li>even counting breaks down at scale</li>
<li>estimates need ranges</li>
<li>single numbers are decisions</li>
</ul>


<p>A great session.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Velocity 2011... a great conference]]></title>
    <link href="http://blog.ccare.me/blog/2011/06/11/velocity-2011-dot-dot-dot-a-great-conference/"/>
    <updated>2011-06-11T20:27:00+01:00</updated>
    <id>http://blog.ccare.me/blog/2011/06/11/velocity-2011-dot-dot-dot-a-great-conference</id>
    <content type="html"><![CDATA[<p>It&#8217;s a week now since I came back from
<a href="http://velocityconf.com/velocity2011">O&#8217;Reilly&#8217;s Velocity</a>
conference in San
Jose so I&#8217;ve had a chance to let some of the thoughts settle in my mind. I
attended both the main conference and the workshops the day before.</p>

<p>Attending a large tech conference is a great way of getting up to speed with the
latest technical themes and meet some great people. Velocity&#8217;s three days long,
but tacked on the end was DevopsDays - a more informal meet-up of people
interested in bringing the traditionally separate roles of development and
operations together. Devops was also an important theme at Velocity. Or, as Theo
Schlossnagle said in
his <a href="http://www.youtube.com/watch?v=y0mHo7SMCQk&amp;feature=player_embedded">Velocity keynote on careers</a>&#8230;
it&#8217;s really about *ops.
Whatever technology you build, that software&#8217;s delivering a service, and
whatever that service, it must operate. Or to put it from another way Theo was
saying that we should treat &#8216;operability like security&#8217;.</p>

<p>For the last couple of months, I&#8217;ve been working within the platform team at
<a href="http://www.talis.com">Talis</a>. We&#8217;re a small team, but have a lot we want to build and manage. Trying to
organise ourselves in a devops is something really important to the way we work.
Personally, I&#8217;ve never felt comfortable with the traditional &#8216;throw it over the
wall&#8217; relationship between software and operations teams. I&#8217;ve worked in a
number of different kinds of teams before, usually I&#8217;ve tried to be a developer
who works closely with ops, but I&#8217;ve definitely fallen into the us and them trap
from time to time. Like agile, devops is not a magic formula, but I definitely
feel much more comfortable with everyone being part of the same team.</p>

<p>I&#8217;ve decided to blog some of my thoughts/notes from the conference: the posts
should start to appear very soon.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Avoiding 'peer not authenticated' error in Apache Httpclient]]></title>
    <link href="http://blog.ccare.me/blog/2011/05/11/avoiding-peer-not-authenticated-error-in-apache-httpclient/"/>
    <updated>2011-05-11T09:18:00+01:00</updated>
    <id>http://blog.ccare.me/blog/2011/05/11/avoiding-peer-not-authenticated-error-in-apache-httpclient</id>
    <content type="html"><![CDATA[<p>Ran into some issues with httpclient not accepting SSL certs for an Amazon S3 url. Wanted to temporarily turn off httpclient&#8217;s certificate verification. This how-to was really helpful.</p>

<p>http://javaskeleton.blogspot.com/2010/07/avoiding-peer-not-authenticated-with.html</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing what happens when a java process runs out of disk]]></title>
    <link href="http://blog.ccare.me/blog/2011/04/11/testing-what-happens-when-a-java-process-runs-out-of-disk/"/>
    <updated>2011-04-11T12:32:00+01:00</updated>
    <id>http://blog.ccare.me/blog/2011/04/11/testing-what-happens-when-a-java-process-runs-out-of-disk</id>
    <content type="html"><![CDATA[<p>Needed to do some smoke testing of a java app that was downloading files. In particular I wanted to simulate it running out of disk.</p>

<p>I didn&#8217;t want to spin up a virtual machine, so instead I created a virtual disk and mounted it as an ordinary directory. I&#8217;d forgotten which commands to use to create, format, and mount a loop device. Blogging them so I can find them again.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Create a raw &#39;disk&#39; around 1 GB in size</span>
</span><span class='line'>dd <span class="k">if</span><span class="o">=</span>/dev/zero <span class="nv">of</span><span class="o">=</span>disk.raw <span class="nv">bs</span><span class="o">=</span>1k <span class="nv">count</span><span class="o">=</span>1000000
</span><span class='line'><span class="c"># Format it - I went for ~900MB which suited my tests</span>
</span><span class='line'>mkfs -t ext2 disk1.raw  900000
</span><span class='line'><span class="c"># Mount the file into a local folder</span>
</span><span class='line'>sudo mount -o loop -t ext2 disk.raw ./mount-dir
</span></code></pre></td></tr></table></div></figure>


<p>Works a treat, and really easy to play with different disk sizes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Interesting SemWeb Books]]></title>
    <link href="http://blog.ccare.me/blog/2011/03/10/interesting-semweb-books/"/>
    <updated>2011-03-10T16:38:00+00:00</updated>
    <id>http://blog.ccare.me/blog/2011/03/10/interesting-semweb-books</id>
    <content type="html"><![CDATA[<p>Over the last few months I&#8217;ve been trying to understand a little more about semantic web concepts etc&#8230; Here&#8217;s a list of some of the books I&#8217;ve been flicking through. Thought I&#8217;d blog them so I can find them again in the future.</p>

<p>John Davies, Rudi Studer, Paul Warren. Semantic web technologies: trends and research in ontology-based systems. Wiley 2006.</p>

<p>Karin K. Breitman, Marco Antonio Casanova, Walter Truszkowski. Semantic web: concepts, technologies, and applications.Springer 2006.</p>

<p>Dean Allemang, Jim Hendler, Semantic web for the working ontologist: Effective modelling in RDFS and OWL.Elsevier 2008..</p>

<p>Pascal Hitzler, Markus Krotzsch, Sebastian Rudolph. Foundations of semantic web technologies. CRC Press, 2010</p>

<p>I found Davies et al. (2006) Quite interesting to flick through&#8230; two of the authors worked at the same company I was with so there&#8217;s some interesting case studies. However, I found the focus was a bit too much towards reasoning, discovery and other conceptual ideas.</p>

<p>Breitman et al. (2006) and Allemang et al. (2008) were interesting as well</p>

<p>My favourite was Hitzler et al. (2010). I really enjoyed their coverage of sparql - I read this one far more closely than the others.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Extracting calendar entries from Outlook]]></title>
    <link href="http://blog.ccare.me/blog/2011/03/03/extracting-calendar-entries-from-outlook/"/>
    <updated>2011-03-03T12:06:00+00:00</updated>
    <id>http://blog.ccare.me/blog/2011/03/03/extracting-calendar-entries-from-outlook</id>
    <content type="html"><![CDATA[<p>Having migrated by Outlook mailbox, I wanted to load calendar entries into another calendar. Following my earlier post, I already had my calendar entries in ICAL format, so all seemed good. However, I also had a number of recurring events (birthdays etc) that I wanted to put into my Google Calendar. The following PERL script was a handy bit of code to extract the recurring events so that I could extract them and add to my public calendar.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$entry</span> <span class="o">=</span>  <span class="s1">&#39;&#39;</span>;
</span><span class='line'><span class="k">while</span><span class="o">(</span>&lt;STDIN&gt;<span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="nv">$_</span> eq <span class="s2">&quot;&quot;</span> <span class="o">||</span> <span class="nv">$_</span> eq <span class="s2">&quot;\n&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="nv">$entry</span> <span class="o">=</span>~ /^RRULE<span class="se">\:</span>/<span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      print <span class="nv">$entry</span>;
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="nv">$entry</span> <span class="o">=</span> <span class="s2">&quot;\n&quot;</span>;
</span><span class='line'>  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>     <span class="nv">$entry</span> .<span class="o">=</span> <span class="nv">$_</span>;
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>print <span class="nv">$entry</span>;
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrating Outlook to a Ubuntu mailbox]]></title>
    <link href="http://blog.ccare.me/blog/2011/03/03/migrating-outlook-to-a-ubuntu-mailbox/"/>
    <updated>2011-03-03T11:10:00+00:00</updated>
    <id>http://blog.ccare.me/blog/2011/03/03/migrating-outlook-to-a-ubuntu-mailbox</id>
    <content type="html"><![CDATA[<p>Wanted to migrate a load of emails and contacts from Outlook to my Ubuntu netbook. Turns out it&#8217;s really simple.</p>

<p>1) Copy the outlook ost file to the netbook. The location of this can be found by looking at outlook&#8217;s settings. Important: make sure outlook is closed first!</p>

<p>2) Convert the ost file to a pst. There&#8217;s a windows tool for this - but I found it worked ok under wine. The program&#8217;s called ost2pst</p>

<p>http://www.windowsreference.com/ms-exchange-server/how-to-convert-ost-to-pst-format-for-outlook/</p>

<p>3) Install the readpst program (sudo apt-get install readpst - on Ubuntu). Then it&#8217;s a simple command to create a UNIX mailbox (one file for each folder)</p>

<p>readpst outlook.pst</p>

<p>4) Enjoy your windows mail in the mail client of your choice. Being a fan of terminal apps, I&#8217;m using Alpine ;-)</p>
]]></content>
  </entry>
  
</feed>
