<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Debugging | Charles' Blog]]></title>
  <link href="http://blog.ccare.me/blog/categories/debugging/atom.xml" rel="self"/>
  <link href="http://blog.ccare.me/"/>
  <updated>2013-09-12T22:18:40+01:00</updated>
  <id>http://blog.ccare.me/</id>
  <author>
    <name><![CDATA[Charles Care]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Creating a simple AMF client for testing]]></title>
    <link href="http://blog.ccare.me/blog/2013/05/09/creating-an-amf-client-for-testing/"/>
    <updated>2013-05-09T12:31:00+01:00</updated>
    <id>http://blog.ccare.me/blog/2013/05/09/creating-an-amf-client-for-testing</id>
    <content type="html"><![CDATA[<p class="headline-box">This post was originally written for the <a href="http://www.blackpepper.co.uk/blog/">Black Pepper Software</a>
blog. The <a href="http://www.blackpepper.co.uk/posts/creating-a-simple-amf-client-for-testing/">original</a>
was posted on 30/04/2013.</p>


<p>A few months back I had to debug an Adobe Flex application that used Adobe Message Format (AMF) for client-server communication. For readers unfamiliar with Adobe&rsquo;s Flex/Flash stack, AMF is a binary RPC communication protocol, usually powered by Adobe&rsquo;s BlazeDS technology. The application I was working on used BlazeDS to expose a number of AMF web services, backed by a fairly standard Java/Spring/Hibernate stack.</p>

<p>As I started investigating the bug, I quickly began to suspect that the root cause was data related. Since many of the application screens were data-driven, I conjectured that there was inconsistent or incomplete data being returned from the web services. At the time, I didn&rsquo;t have access to a stable version of Adobe FlexBuilder for Linux, so I wasn&rsquo;t able to easily jump in and attach a debugger to the Flex application. However, I was able to read the code and understand a bit about the RPC service calls it was making. The server-side access logs also provided a good idea of the client-server interactions that were happening. In order to gain further insight into the scenario under test, I found myself wanting to &lsquo;see&rsquo; the data that was flowing between the two applications.</p>

<!-- more -->


<p>Even the simplest client-server app is a form of a distributed system, and when debugging a distributed system, I&rsquo;m a big advocate of understanding the actual data flowing over the wire. I find it helps build up a picture of what an application is actually doing. Most of the systems I work with use human-readable formats in their web-services and, as a result, I always keep tools like tcpdump and wireshark to hand. However, with a binary format such as AMF, it&rsquo;s really difficult to &lsquo;see&rsquo; what data is being transferred.</p>

<h2>Building a client</h2>

<p>Thankfully, there are client-side Java bindings for BlazeDS which can interact with an RPC endpoint and handle the marshalling/unmarshalling of data into Java POJOs. This allowed me to bypass flex altogether and hack together a simple Java client to interact with my webservices. In order to get started, I started a new Maven project, and added the following dependencies:</p>

<p>```xml
<dependency></p>

<pre><code>&lt;groupId&gt;com.adobe.blazeds&lt;/groupId&gt;
&lt;artifactId&gt;blazeds-core&lt;/artifactId&gt;
&lt;version&gt;3.2.0.3978&lt;/version&gt;
</code></pre>

<p></dependency></p>

<p><dependency></p>

<pre><code>&lt;groupId&gt;com.adobe.blazeds&lt;/groupId&gt;
&lt;artifactId&gt;blazeds-common&lt;/artifactId&gt;
&lt;version&gt;3.2.0.3978&lt;/version&gt;
</code></pre>

<p></dependency></p>

<p><dependency></p>

<pre><code>&lt;groupId&gt;com.adobe.blazeds&lt;/groupId&gt;
&lt;artifactId&gt;blazeds-remoting&lt;/artifactId&gt;
&lt;version&gt;3.2.0.3978&lt;/version&gt;
</code></pre>

<p></dependency>
```</p>

<p>Connecting to the AMF endpoint then just required a few lines of Java code:</p>

<p>```java
AMFConnection amfConnection = new AMFConnection();
try {</p>

<pre><code>String url = "http://myapp.example.com/myservice/amf";
amfConnection.connect(url);
</code></pre>

<p>} finally {</p>

<pre><code>amfConnection.close();
</code></pre>

<p>}
```
Once I had a connection, it was simple to call one of the web services. For instance, in the application I was interested in, there was a UserService with an remote method named getUserByEmailAddress. The method took a single parameter: the user&rsquo;s email address. To invoke this service, I did the following:</p>

<p>```java
Object result = amfConnection.call(&ldquo;UserService.getUserByEmailAddress&rdquo;,</p>

<pre><code>                                    "charles@example.com");
</code></pre>

<p>```</p>

<p>This all looked good. However, I wasn&rsquo;t quite finished. In this particular example, the service returned a specific type of object that needed to be unmarshalled. Let&rsquo;s say that the return type of getUserByEmailAddress() was a class with a qualified name of <strong>com.example.model.User</strong>. In order for the unmarshalling code to work, the AMF bindings required me to create a client-side Java class for this type. But this was not too difficult, I just needed to provide the relevant fields, setters, and getters. For instance, something like this:</p>

<p>```java
package com.example.model;</p>

<p>public class User {</p>

<pre><code>private final String name;
private final String emailAddress;

...
</code></pre>

<p>}
```</p>

<p>Of course, what we have here is a classic Data Transfer Object (or DTO), and I soon found that I&rsquo;d need to re-create a large number of DTO classes, far more boiler-plate code than I wanted to write. In some projects it might be possible to share some class definitions with the server project. However, in my particular example, the server-side classes were entities containing Hibernate/JPA annotations and were not suited to be used in a client-side environment.</p>

<h2>Using HashMap-backed Data Transfer Objects</h2>

<p>In fact, there is a far easier approach. Although the client requires local DTO classes, they can all be backed by a HashMap, drastically reducing the boiler-plate required. For instance, in the case of the User class, all I needed to do was to extend <strong>java.util.HashMap</strong>. I was able to drop all of the declarations and just have a empty class:</p>

<p>```java
package com.example.model;</p>

<p>public class User extends HashMap {</p>

<pre><code>// No further declarations required
</code></pre>

<p>}
```</p>

<p>Then I was able to use simple Map getters to access the data and have a look at what was going on.</p>

<p>```java
User result = (User) amfConnection.call(&ldquo;UserService.getUserByEmailAddress&rdquo;,</p>

<pre><code>                                        "charles@example.com");
</code></pre>

<p>System.out.println(result.get(&ldquo;name&rdquo;));
System.out.println(result.get(&ldquo;email&rdquo;));
```</p>

<h2>Summary</h2>

<p>Building a lightweight Java client provides an alternative way of accessing a BlazeDS endpoint, which I found very useful when debugging and comprehend AMF services. Having this a client also enabled me to write a programmatic API test that didn&rsquo;t rely on running a Flash Player. Finally, using DTOs that are specialisations of HashMap reduces boilerplate and allows you to make faster progress.</p>

<p>And the bug? Well, it was data related, and it did get fixed.</p>
]]></content>
  </entry>
  
</feed>
